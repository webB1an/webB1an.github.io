import{_ as s,c as i,o as a,R as l}from"./chunks/framework.Tt2DsVC6.js";const g=JSON.parse('{"title":"slice 和 splice 区别","description":"","frontmatter":{},"headers":[],"relativePath":"blog/article/2023/8.md","filePath":"blog/article/2023/8.md","lastUpdated":1702367922000}'),h={name:"blog/article/2023/8.md"},n=l(`<h1 id="slice-和-splice-区别" tabindex="-1">slice 和 splice 区别 <a class="header-anchor" href="#slice-和-splice-区别" aria-label="Permalink to &quot;slice 和 splice 区别&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">初衷</p><p>slice 和 splice 这两个方法无论是在面试还是在工作中都经常会遇到，但是很多人都会搞混它们的区别，所以我想通过这篇文章来总结一下它们的区别。</p></div><p><code>slice()</code> 和 <code>splice()</code> 是 JavaScript 数组的两个常用方法，它们用于处理数组的不同操作。它们的主要区别在于它们的功能和对原数组的影响：</p><h2 id="slice-方法" tabindex="-1"><code>slice()</code> 方法 <a class="header-anchor" href="#slice-方法" aria-label="Permalink to &quot;\`slice()\` 方法&quot;">​</a></h2><ul><li>功能：<code>slice()</code> 方法用于创建一个新的数组，包含从原数组中提取的指定元素。</li><li>参数：<code>slice()</code> 方法接受两个可选参数，分别是起始索引和结束索引。起始索引指定开始提取元素的位置（包含该位置的元素），结束索引指定停止提取元素的位置（不包含该位置的元素）。如果不提供任何参数，则会复制整个数组。</li><li>原数组不变：<code>slice()</code> 方法不会修改原数组，而是返回一个新的包含提取元素的数组。</li></ul><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;banana&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;grape&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;kiwi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> slicedFruits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fruits.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(slicedFruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;, &#39;kiwi&#39;]</span></span></code></pre></div><h2 id="splice-方法" tabindex="-1"><code>splice()</code> 方法： <a class="header-anchor" href="#splice-方法" aria-label="Permalink to &quot;\`splice()\` 方法：&quot;">​</a></h2><ul><li>功能：<code>splice()</code> 方法用于向/从数组中添加/删除元素，并可以同时返回被删除的元素组成的数组。</li><li>参数：<code>splice()</code> 方法接受三个参数，第一个参数是起始索引，指定要进行操作的起始位置。第二个参数是要删除的元素个数（可以为0），第三个及后续参数是要添加到数组中的新元素。如果第二个参数为0，且后续参数存在，则表示在指定位置插入新元素。</li><li>原数组改变：<code>splice()</code> 方法会修改原数组，进行添加或删除元素的操作。</li></ul><p>示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fruits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;apple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;banana&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;orange&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;grape&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;kiwi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> removedFruits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fruits.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(removedFruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&#39;banana&#39;, &#39;orange&#39;]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&#39;apple&#39;, &#39;grape&#39;, &#39;kiwi&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fruits.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pear&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;watermelon&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fruits); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Output: [&#39;apple&#39;, &#39;grape&#39;, &#39;pear&#39;, &#39;watermelon&#39;, &#39;kiwi&#39;]</span></span></code></pre></div><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><ul><li><code>slice()</code> 是用于从原数组中提取元素生成一个新数组，原数组保持不变。</li><li><code>splice()</code> 是用于在原数组中添加/删除元素，会修改原数组，并返回被删除的元素组成的新数组。</li></ul>`,13),t=[n];function p(e,k,r,E,d,c){return a(),i("div",null,t)}const F=s(h,[["render",p]]);export{g as __pageData,F as default};
