import{_ as a,c as s,o as i,R as t}from"./chunks/framework.Tt2DsVC6.js";const g=JSON.parse('{"title":"深入浅出 JavaScript 事件循环：一次彻底搞懂宏任务与微任务","description":"","frontmatter":{},"headers":[],"relativePath":"blog/article/2025/2.md","filePath":"blog/article/2025/2.md","lastUpdated":1745971043000}'),e={name:"blog/article/2025/2.md"},l=t(`<h1 id="深入浅出-javascript-事件循环-一次彻底搞懂宏任务与微任务" tabindex="-1">深入浅出 JavaScript 事件循环：一次彻底搞懂宏任务与微任务 <a class="header-anchor" href="#深入浅出-javascript-事件循环-一次彻底搞懂宏任务与微任务" aria-label="Permalink to &quot;深入浅出 JavaScript 事件循环：一次彻底搞懂宏任务与微任务&quot;">​</a></h1><blockquote><p>“JavaScript 是单线程的，但它为什么可以处理异步任务？”<br> “为什么 Promise 比 setTimeout 先执行？”<br> “微任务到底有多微？”</p></blockquote><p>这些问题，绕不开一个关键词：<strong>事件循环（Event Loop）</strong>。今天我们就用通俗的语言，讲清楚 JS 异步背后的“神秘机制”。</p><h2 id="什么是事件循环" tabindex="-1">什么是事件循环？ <a class="header-anchor" href="#什么是事件循环" aria-label="Permalink to &quot;什么是事件循环？&quot;">​</a></h2><p>事件循环是 JavaScript 用来处理同步和异步代码执行顺序的一种机制，它确保：</p><p>同步代码立即执行，异步代码在合适的时机执行。</p><p>更正式地说：</p><p>事件循环是 JavaScript 执行环境中调度任务执行的核心机制。它负责从任务队列中依次取出任务并执行，确保单线程的 JavaScript 能够以非阻塞的方式处理异步操作。</p><h2 id="为什么需要事件循环" tabindex="-1">为什么需要事件循环？ <a class="header-anchor" href="#为什么需要事件循环" aria-label="Permalink to &quot;为什么需要事件循环？&quot;">​</a></h2><p>JavaScript 是单线程的 —— 所有代码只能一个接一个执行。但在实际应用中我们经常要做：</p><ul><li>网络请求</li><li>读取文件</li><li>定时器</li><li>等待用户点击</li></ul><p>这些事如果“卡”在主线程里，整个页面就“假死”了。于是，事件循环机制就登场了：它允许这些操作“异步地”执行，并在结果准备好后重新排入任务队列。</p><h2 id="一、javascript-是单线程的" tabindex="-1">一、JavaScript 是单线程的 <a class="header-anchor" href="#一、javascript-是单线程的" aria-label="Permalink to &quot;一、JavaScript 是单线程的&quot;">​</a></h2><p>JavaScript 设计之初就是运行在浏览器中的“脚本语言”，初衷就是操作网页。网页 UI 渲染也只能有一个线程，如果 JS 能多线程同时改 DOM，那页面得乱套。</p><p>于是，JavaScript 是单线程的。</p><p>但现代 Web 不可能没有异步：网络请求、定时器、点击事件……那 JS 是怎么做到“又单线程又异步”的呢？</p><p>这就要靠主角：<strong>事件循环（Event Loop）</strong></p><h2 id="二、事件循环是怎么工作的" tabindex="-1">二、事件循环是怎么工作的？ <a class="header-anchor" href="#二、事件循环是怎么工作的" aria-label="Permalink to &quot;二、事件循环是怎么工作的？&quot;">​</a></h2><p>简单来说，事件循环就像一个无限循环的工厂，它在不停地执行任务。但它有严格的流程：</p><blockquote><ol><li>执行一个<strong>宏任务</strong>（比如主线程代码或 <code>setTimeout</code>）</li><li>执行所有<strong>微任务</strong>（比如 <code>Promise.then</code>）</li><li>浏览器进行<strong>UI 渲染</strong></li><li>回到第 1 步</li></ol></blockquote><blockquote><p><strong>注意：每个宏任务执行完之后，都会清空所有的微任务！</strong></p></blockquote><hr><h2 id="三、宏任务-和-微任务-到底是什么" tabindex="-1">三、宏任务 和 微任务 到底是什么？ <a class="header-anchor" href="#三、宏任务-和-微任务-到底是什么" aria-label="Permalink to &quot;三、宏任务 和 微任务 到底是什么？&quot;">​</a></h2><h3 id="✅-宏任务-macro-task" tabindex="-1">✅ 宏任务（Macro Task） <a class="header-anchor" href="#✅-宏任务-macro-task" aria-label="Permalink to &quot;✅ 宏任务（Macro Task）&quot;">​</a></h3><p>由浏览器发起的“大的任务块”，比如：</p><ul><li>整体脚本（主线程代码）</li><li><code>setTimeout</code></li><li><code>setInterval</code></li><li><code>setImmediate</code>（Node 专属）</li><li><code>requestAnimationFrame</code></li></ul><p>宏任务之间执行是“分开的”，一个执行完，才轮到下一个。</p><hr><h3 id="✅-微任务-micro-task" tabindex="-1">✅ 微任务（Micro Task） <a class="header-anchor" href="#✅-微任务-micro-task" aria-label="Permalink to &quot;✅ 微任务（Micro Task）&quot;">​</a></h3><p>由 JavaScript 自己产生的“更细粒度的异步任务”，比如：</p><ul><li><code>Promise.then</code> / <code>catch</code> / <code>finally</code></li><li><code>queueMicrotask</code></li><li><code>MutationObserver</code></li></ul><p>微任务会在<strong>当前宏任务结束后、下一个宏任务开始前</strong>全部执行完。</p><hr><h2 id="四、实际运行顺序示例" tabindex="-1">四、实际运行顺序示例 <a class="header-anchor" href="#四、实际运行顺序示例" aria-label="Permalink to &quot;四、实际运行顺序示例&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,35),n=[l];function h(p,r,o,k,c,d){return i(),s("div",null,n)}const u=a(e,[["render",h]]);export{g as __pageData,u as default};
