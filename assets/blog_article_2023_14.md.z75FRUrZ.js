import{_ as s,c as i,o as a,R as e}from"./chunks/framework.Tt2DsVC6.js";const E=JSON.parse('{"title":"JS 原型、原型链简单理解","description":"","frontmatter":{},"headers":[],"relativePath":"blog/article/2023/14.md","filePath":"blog/article/2023/14.md","lastUpdated":1745971043000}'),t={name:"blog/article/2023/14.md"},n=e(`<h1 id="js-原型、原型链简单理解" tabindex="-1">JS 原型、原型链简单理解 <a class="header-anchor" href="#js-原型、原型链简单理解" aria-label="Permalink to &quot;JS 原型、原型链简单理解&quot;">​</a></h1><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><p>每个对象都拥有一个原型对象。</p><p>当我们试图访问一个对象的属性时，不仅会在该对象属性上找，还会在该对象的原型上找，以及该对象的原型的原型，依次层层向上查找，直到找到一个名字匹配的属性或到达原型链的末尾。</p><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>原型对象也是对象，也可能有自己的原型，并从中继承方法和属性，一层一层，以此类推，这种关系被称为原型链。这也解释了一个对象为什么会拥有定义在其他对象中的属性和方法的原因。</p><p>在对象实例和它的构造器的原型对象之间建立一个链接（它是<code>__proto__</code>属性，是从构造函数的prototype属性派生的），之后通过上溯原型链，在构造器中找到这些属性和方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二步 创建实例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;person&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>简单分析下上面的代码：</p><ul><li>构造函数 <code>Person</code> 存在原型对象 <code>Person.prototype</code></li><li>由构造函数创建的实例 <code>person</code>，<code>person</code> 的 <code>__proto__</code> 指向构造函数的原型对象 <code>Person.prototype</code></li><li><code>Person.prototype.__proto__</code> 指向内置对象，因为 <code>Person.prototype</code> 是对象，默认是由 <code>Object</code> 创建的，而 <code>Object.prototype</code> 为内置对象</li><li><code>Person.__proto__</code> 指向内置匿名函数，因为 <code>Person</code> 是函数对象，默认是由 <code>Function</code> 创建的</li><li><code>Function.prototype</code> 和 <code>Function.__proto__</code> 同时指向匿名函数，这样原型链的终点就是 null</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>下面给出一个概念：</p><p><code>__proto__</code> 作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象。</p><p>每个对象的 <code>__proto__</code> 都指向它的构造函数的原型对象 <code>prototype</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span></span></code></pre></div><p>构造函数 <code>Person</code> 是一个函数对象，是由 <code>Function</code> 构造函数函数产生的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Person.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span></span></code></pre></div><p>构造函数 <code>Person</code> 的原型对象 <code>Person.prototype</code> 是一个对象，是由 <code>Object</code> 产生的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span></span></code></pre></div><p>所有的构造器都是函数对象，函数对象都是 <code>Function</code> 构造产生的</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span></span></code></pre></div><p>Object 的原型对象 <code>Object.prototype</code> 是一个对象，也有 <code>__proto__</code> ，指向 <code>null</code>, <code>null</code> 是原型链的终点</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span></code></pre></div><p>因此总结如下：</p><ul><li><code>__proto__</code> 作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象</li><li>一切对象都继承自 <code>Object</code> 对象，<code>Object</code> 对象直接继承自根源对象 <code>null</code></li><li>一切函数对象（包括 <code>Object</code>）都继承自 <code>Function</code> 对象</li><li><code>Object</code> 对象直接继承自 <code>Function</code> 对象</li><li><code>Function</code> 对象的 <code>__proto__</code> 会指向自己的原型对象，最终还是继承自 <code>Object</code> 对象，即 <code>Function.__proto__ === Function.prototype</code></li></ul>`,25),p=[n];function l(h,o,k,d,c,r){return a(),i("div",null,p)}const y=s(t,[["render",l]]);export{E as __pageData,y as default};
